Emerald
=======

Campos, M. & Salcedo, A.

***

## Consideraciones Léxicas

A continuación se presentan las palabras reservadas del lenguaje. Éstas no pueden ser utilizadas como 
identificadores ni ser redefinidas.

    boolbasaur    charizard    intmonchan    floatzel    voidporeon   onix    
    registeer     unown        true          false       const        var
    for           from         to            by          while        return
    if            elsif        else          read        print        println
    tag           BOOM         continue      switch      case         default

Un identificador es una secuencia de caracteres alfanúmericos o el símbolo _underscore_ `_`, que empieza con una letra.
Los identificadores son sensibles a mayúsculas, por lo tanto `ident`, `Ident` y `IDent` son diferentes.

Los enteros se representan con una secuencia de dígitos del `0` al `9`.

Los floatantes empiezan con una secuencia de dígitos, luego seguida por un punto y termina con otra secuencia de dígitos. 
Por ejemplo, `0.28`, `28.0` son números válidos pero `.28` y `28.` no.

Los caracteres es un caracter entre comillas simples. Por ejemplo:

    'E'   'm'   'e'   'r'   'a'   'l'   'd'
   
Las cadenas de caracteres son una secuencia de caracteres ASCII entre comillas dobles. Por ejemplo:

    "Emerald FTW"    "pokemon"    "Hola!"

Los comentarios simples (de una linea) son representados de la siguiente manera:

    # Hola, este comentario es de una linea.

El lenguaje Emerald maneja comentarios de varias líneas. Por ejemplo: 

    /* Este comentario es de varias
       lineas en el lenguaje Emerald.
       Es muy chevere. */


## Gramática

    START ::= DEFLIST

    DEFLIST  ::= DEFINITION
    DEFLIST  ::= DEFINITION DEFLIST

    DEFINITION  ::= FUNCDEF
    DEFINITION  ::= REGISTER
    DEFINITION  ::= UNION
    DEFINITION  ::= DECLARATION

    EXPR  ::= EXPR `+` EXPR
    EXPR  ::= EXPR `-` EXPR
    EXPR  ::= EXPR `*` EXPR
    EXPR  ::= EXPR `/` EXPR
    EXPR  ::= EXPR `^` EXPR
    EXPR  ::= EXPR `=` EXPR
    EXPR  ::= EXPR `[` EXPR `]`
    EXPR  ::= EXPR `%` EXPR
    EXPR  ::= EXPR `<` EXPR
    EXPR  ::= EXPR `>` EXPR
    EXPR  ::= EXPR `<=` EXPR
    EXPR  ::= EXPR `>=` EXPR
    EXPR  ::= EXPR `&&` EXPR
    EXPR  ::= EXPR `||` EXPR
    EXPR  ::= EXPR `!=` EXPR
    EXPR  ::= EXPR `.` `identifier`
    EXPR  ::= `(` EXPR `)`
    EXPR  ::= `!` EXPR
    EXPR  ::= `-` EXPR
    EXPR  ::= CONST
    EXPR  ::= FUNCCALL
    EXPR  ::= `identifier`
    EXPR  ::= `string`

    CONST ::= NUMBER
    CONST ::= BOOLEAN
    CONST ::= `char`

    NUMBER   ::= `int`
    NUMBER   ::= `float`

    BOOLEAN  ::= `true`
    BOOLEAN  ::= `false`

    ARGS  ::= λ
    ARGS  ::= ARGSLIST

    ARGSLIST ::= EXPR
    ARGSLIST ::= ARGSLIST `,` EXPR

    INST  ::= STMT
    INST  ::= BLOCK

    STMT  ::= IFSTMT
    STMT  ::= ASIGNMENT
    STMT  ::= WHILESTMT
    STMT  ::= FORSTMT
    STMT  ::= FUNCCALL
    STMT  ::= BREAK
    STMT  ::= CONTINUE
    STMT  ::= LABEL
    STMT  ::= RETURN
    STMT  ::= SWITCHSTMT

    BLOCK ::= `{` STMTLIST `}`
    BLOCK ::= `{` DECLARELIST STMTLIST `}`

    STMTLIST ::= STMT
    STMTLIST ::= STMT `;` STMTLIST

    ASIGNMENT   ::= ASIGNLIST `:=` ARGSLIST

    ASIGNLIST   ::= `identifier` ARRDOT
    ASIGNLIST   ::= `identifier` ARRDOT `,` ASIGNLIST

    ARRDOT  ::= λ
    ARRDOT  ::= `[` EXPR `]` ARRDOT
    ARRDOT  ::=  `.` `identifier` ARRDOT

    IFSTMT  ::= `if` EXPR INST
    IFSTMT  ::= `if` EXPR INST IFLIST

    IFLIST  ::= `else` INST
    IFLIST  ::= `elsif` EXPR INST
    IFLIST  ::= `elsif` EXPR INST IFLIST

    WHILESTMT  ::= `while` EXPR INST

    FORSTMT ::= `for` `identifier` `from` EXPR `to` EXPR `by` EXPR INST
    FORSTMT ::= `for` `identifier` `from` EXPR `to` EXPR INST

    FUNCCALL   ::= `identifier` `(` ARGS `)`

    BREAK   ::= `break`
    BREAK   ::= `break` `identifier`

    CONTINUE   ::= `continue`
    CONTINUE   ::= `continue` `identifier`

    LABEL   ::= `tag` `:` `identifier`

    RETURN  ::= `return`
    RETURN  ::= `return` EXPR

    SWITCHSTMT ::= `switch` EXPR `{` CASE `}`

    CASE ::= `case` CONST `->` BLOCK
    CASE ::= `case` CONST `->` BLOCK CASELIST

    CASELIST   ::= `default` `->` BLOCK
    CASELIST   ::= `case` CONST `->` BLOCK
    CASELIST   ::= `case` CONST `->` BLOCK CASELIST

    DECLARATION   ::= TYPE IDLIST INITLIST `;`
    DECLARATION   ::= COMPLEXTYPE IDLIST INITLIST `;`

    IDLIST  ::= `identifier` ARRAYDECL
    IDLIST  ::= `identifier` ARRAYDECL `,` IDLIST
    IDLIST  ::= `const` `identifier` ARRAYDECL
    IDLIST  ::= `const` `identifier` ARRAYDECL `,` IDLIST

    ARRAYDECL  ::= λ
    ARRAYDECL  ::= `[` EXPR `..` EXPR `]`

    DECLARELIST   ::= DECLARATION
    DECLARELIST   ::= DECLARELIST DECLARATION

    INITLIST   ::= λ
    INITLIST   ::= `:=` ARGSLIST

    TYPE ::= `intmonchan`
    TYPE ::= `floatzel`
    TYPE ::= `boolbasaur`
    TYPE ::= `charizard`
    TYPE ::= `onix`

    COMPLEXTYPE   ::= `unown` `identifier`
    COMPLEXTYPE   ::= `registeer` `identifier`

    VAR  ::= λ
    VAR  ::= `var`

    REGISTER   ::= `registeer` `identifier` `{` DECLARELIST `}`

    UNION   ::= `unown` `identifier` `{` DECLARELIST `}`

    FUNCDEF ::= TYPE `identifier` `(` `)`
    FUNCDEF ::= `voidporeon` `identifier` `(` `)`
    FUNCDEF ::= TYPE `identifier` `(` ARGSDEF `)`
    FUNCDEF ::= `voidporeon` `identifier` `(` ARGSDEF `)`

    ARGSDEF ::= VAR TYPE ARG
    ARGSDEF ::= VAR TYPE ARG `,` ARGSDEF
    ARGSDEF ::= VAR COMPLEXTYPE ARG
    ARGSDEF ::= VAR COMPLEXTYPE ARG `,` ARGSDEF

    ARG  ::= `identifier`
    ARG  ::= `identifier` `[` `identifier` `..` `identifier` `]`


## Estructura del programa

Un programa en Emerald consiste de una secuencia de definiciones de variables globales, 
funciones y tipos definidos por el usuario (`registeer`s y `unowns`s).

Todo programa debe al menos tener una función sin parametros denominada **`main`** que 
retorna `voidporeon` (vacío).  

## Reglas de Alcance

Emerald tiene alcance estático. El alcance más externo corresponde a las declaraciones
globales (variables, funciones y tipos definidos por el usuario). Después en cada bloque 
se abre un alcance nuevo. También se abre un alcance cuando se declara la variable 
de una instrucción `for`. 
    
Las funciones y los registros sólo se pueden declarar en el alcance global. No importa el
orden de su definición, éstas son visibles entre sí. No se pueden definir funciones, 
registros, uniones o variables globales con el mismo nombre.

La declaración de variables en un bloque sólo se puede hacer al principio del mismo. 
Por ejemplo:

    # Funcion valida
    
    voidporeon funcionValida {
    
        intmonchan int;
        boolbasaur bool;        
        <instrucciones>
        ...
    }
    
    # Funcion invalida
    
    voidporeon funcionInvalida {
    
        intmonchan int;        
        int := 1;        
        boolbasaur bool;  # Esto es invalido.
        <instrucciones>
        ...
    }
    
Se pueden declarar variables con el mismo nombre tales que éstas no estén en el mismo 
alcance y que no tengan el mismo nombre que una función, registro o unión ya definido. 
Si una variable se declara en el alcance actual y ya existe una con el mismo nombre en 
un alcance externo entonces la primera opaca a la segunda.


## Tipos

### Tipos Primitivos

Los tipos primitivos de Emerald son:

* **intmonchan**: Tipo entero.
* **floatzel**:   Tipo punto flotante.
* **charizard**:  Tipo caracter ASCII.
* **boolbasaur**: Tipo booleano (true, false).
* **onix**:       Secuencia de caracteres ASCII inmutable.
* **voidporeon**: El vacío. Utilizado solamente para el retorno de funciones. 

### Arreglos

* Los arreglos son unidimensionales con índices arbitrarios de cualquier tipo primitivo 
de Emerald menos `voidporeon`. 
* Son de tamaño fijo y constante a tiempo de compilación. Esto significa que una 
vez declarados, el tamaño de un arreglo no se puede cambiar. 
* Los índices de un arreglo deben ser de tipo entero.
* Cuando se intenta de acceder a una posición fuera de los límites de un arreglo, 
ocurre un error a tiempo de ejecución.

Sintaxis:

    <tipo> <identificador> [<número> .. <número>]

Ejemplo:

    intmonchan arreglo1[1..10]
    floatzel   arreglo2[0..42]
    charizard  arreglo3[9..19]

### Tipos Compuestos

En Emerald se pueden crear tipos compuestos, los cuales consisten de una colección 
de campos de tipos primitivos y tipos definidos por el usuario. 

Los registros, `registeer`, se definen de la siguiente manera:

    registeer <identificador> {
    
        <tipo1> <identificador1> ;
        <tipo2> <identificador2> := <inicialización> ;
        ...
        <tipoN> <identificadorN> ;
    }
    
Uniones, `unown`, se representan de la misma manera:

    unown <identificador> {
        
        <tipo1> <identificador1> ;    
        <tipo2> <identificador2> := <inicialización> ;
        ...
        <tipoN> <identificadorN> ;
    }

Las declaraciones de variables de tipos compuestos se realizan de la siguiente manera:

    registeer <nombreRegistro> <identificador1>;
    unown     <nombreUnion>    <identificador2>;


Para acceder a un atributo de un registro o unión, se utiliza el operador `.`.

    <identificador>.<campo>

Un campo de un tipo compuesto no puede contener el mismo tipo que está siendo declarado.
Por ejemplo:
    
    registeer unRegistro {
    
        intmonchan int;
        registeer unRegistro reg;   # Esto es invalido.
        ...
    }
    
    unown unUnion {
    
        boolbasaur bool;
        unown unaUnion un;   # Esto tambien es invalido.
        ...
    }

A continuación se encuentra un ejemplo de cómo definir y utilizar tipos compuestos:

    registeer unRegistro {   
        intmonchan campo1; 
        floatzel   campo2;
    }
    
    unown unaUnion {
        intmonchan var1;
        floatzel   var2;
        boolbasaur var3;
    }

    voidporeon main () {
    
       registeer  unRegistro reg;
       unown      unaUnion   un;
       intmonchan int;
       
       reg.campo1 := 42;
       unaUnion.var1 := 3;
       int := reg.campo1 / unaUnion.var1;
       ...
    }

## Variables

Las variables pueden ser declaradas de cualquier tipo excepto tipo `voidporeon`. 

### Declaración e Inicialización de Variables

* Las variables se pueden incializar al momento de declararlas, al menos si son arreglos o
tipos definidos por el usuario.
* Las variables de tipo `onix` (string) siempre deben ser inicializadas.
* El tipo de la expresión debe concidir con el tipo de la declaración. 
* Se pueden hacer declaraciones e inicializaciones simultáneas.
* Para declarar una constante, se utiliza la palabra reservada `const`.

Ejemplo:

    charizard   const A := 'A'          # Declaracion de una constante
    floatzel    a, b, c;                # Declaracion simultanea
    intmonchan  d, e, f := 1, 2, 3;     # Declaracion e inicializacion simultanea
    boolbasaur  g[1..42];               # Declaracion de un arreglo
    onix        h := "FTW!";            # Declaracion e incializacion de un string   
    registeer   unRegistro reg;         # Declaracion de un registro
    unown       unaUnion   un;          # Declaracion de una union
       
## Funciones

* No se permiten funciones anidadas.
* Los parámetros formales pueden ser de cualquier tipo distinto a `voidporeon`.
* Los nombres de los parámetros deben ser distintos.
* El pasaje de parámetros pueden ser por valor o por referencia. Los tipos primitivos 
pueden ser pasados por valor o por referencia pero los tipos compuestos obligatoriamente 
son pasados por referencia. 
* Para pasar un parámetro por referencia, se utiliza la palabra reservada `var`.
* Los nombres de las variables locales pueden ser iguales a los 
nombres de los parámetros pero _**why would you do that?**_

![why would you do that?](https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcTdAXwa3WVDHJEpUHwicNyThSo9yjC1VlHd3dHuram9xrGKrrH6)

* Los tipos de retorno sólo pueden ser tipos primitivos de Emerald.
* La instrucción **`return`** es obligatoria cuando el tipo de retorno de la función 
no es `voidporeon`.
* Si una función tiene como retorno el vacío (`voidporeon`) y se utiliza la instrucción 
`return` en el cuerpo de la misma entonces sólo se puede utilizar el retorno vacío. 
* Se permiten funciones recursivas directa o indirectamente.

### Invocación de Funciones

* Los parámetros son evaluados de izquierda a derecha. 
* Las funciones pueden ser llamadas en cualquier expresión tales que éstas no retornen 
`voidporeon`. 
* Las funciones también pueden ser invocadas como si fueran una instrucción.
* El número de argumentos pasados a una función al momento de ser llamada debe ser igual 
al número de parámetros formales.
* Los tipos de los argumentos reales deben coincidir con los tipos de los argumentos formales.

Ejemplo:

    voidporeon aFunction (intmonchan int, floatzel array[init..end], var registeer aRegister reg) {
    
        <declaraciones>;
        <instrucciones>;
    }
    
    registeer aRegister { ... }
    
    voidporeon main () {
    
        intmonchan i;
        floatzel   a[1..19];
        registeer aRegister reg;        
        ...        
        aFunction(i,a,reg);
        ...
    }
    

## Equivalencia y Compatibilidad de Tipos

Emerald es un lenguaje fuertemente tipado. 
La equivalencia y compatibilidad de tipos es por nombre.

## Asignación

Sintaxis:

    <identificador> := <expresión>;

También se puede hacer asignación multiple:

    l1, l2, ..., ln := r1, r2, ..., rn;

* Ambos lados de la asignación deben ser del mismo tipo.
* No es permitido utilizar constantes como lvalue.

## Estructuras de Control

### Selector

* Una cláusula `else` o `elsif` siempre será asociada al `if` más cercano.
* La expresión del condicional debe ser de tipo `boolbasaur` (boolean).
* Las cláusulas `if`, `elsif` o `else` pueden ser seguidas por una sola 
instrucción o un bloque de instrucciones. 
* Si se utiliza un `elsif` o un `else`, entonces obligatoriamente éstas son 
acompañadas por un `if`.
* Se puede utilizar solamente la instrucción `if`. Se pueden omitir 
los `elsif` o los `else`.

Sintaxis: 

    if <expresiónBooleana> {
        ...
    } elsif <expresiónBooleana2> {
        ...
    } else {
        ...
    }

### Iteración Acotada

* La variable de iteración del `for` sólo puede ser de un valor escalar 
discreto (`intmonchan`, `boolbasaur` o `charizard`).
* La variable de iteración sólo es visible en el cuerpo del `for`. Ésta no 
puede ser utilizada como lvalue, es decir, no puede ser modificada por el usuario.
* La variable de iteración incremetará por 1 al menos si el usuario especifica el salto,
utilizando la palabra reservada `by`.

Sintaxis:

    for <identificador> from <expresión> to <expresión> {
         ...
    }

    for <identificador> from <expresión> to <expresión> by <expresión> {
         ...
    }
    
    
### Interación Indeterminada
    
* La expresión de la iteración indeterminada debe ser de tipo `boolbasaur` (boolean).
* La condición se chequea al principio de cada iteración.

Sintaxis:

    while <expresiónBooleana> {
         ...
    }


### Etiquetas, Break y Continue

Cualquier iteración, sea acotada o indeterminada, puede ser etiquetada. Todas las etiquetas
utilizadas deben tener nombres distintos.

* Para finalizar incondicionalmente una iteración se utiliza la instrucción `BOOM` (break). 
* Para saltar al siguiente ciclo de una iteración se utiliza la instrucción `continue`. 
* Estas dos instrucciones sólo pueden ser utilizadas en los bloques de interaciones.

Ejemplo:

    tag: label;
    for i from 0 to 100 by 2 {
    
        while true {
            ...
            BOOM label; # Rompe la iteración externa que esta etiquetada como label.
            ...
            BOOM; # Rompe la iteración interna.
        }
        ...
    }
    
    tag: label2;
    for i from 0 to 42 by 2 {
    
        while true {
            ...
            continue label; # Salta al siguiente ciclo de la iteración externa que esta etiquetada como label2.
            ...
            continue; # Salta al siguiente ciclo de la iteración interna.
        }
        ...
    }

### Case

El lenguaje Emerald maneja la instrucción case, la cual es denominada `switch`. 
Ésta se maneja como los case del lenguaje Pascal y no el switch de C.

Los `case` son disjuntos y el valor `default` es opcional. Deben haber al menos
dos `case` en el switch.

Sintaxis:

    switch <expresión> {
        case <constante1> -> { ... }
        case <constante2> -> { ... }
        ...
        default           -> { ... }
    }


## Expresiones   

* La conversión de tipos se debe hacer explícitamente. 
* Los operadores de Emerald sólo se pueden utilizar entre objetos del mismo tipo. 
Es decir, no se puede multiplicar un número entero con un punto flotante, se debe convertir 
alguno de ellos para poder efectuar la multiplicación. 

### Operadores

    Intmonchan / Float  | Charizard | Boolbasaur
    :----------------:  | :-------: | :--------:
    -                   | >         |   !  
    ^                   | >=        |   =
    *                   | <         |   !=
    /                   | <=        |   &&       
    %                   | =         |   &#124;&#124;
    +                   | !=        |
    -                   |           |
    >                   |           |
    >=                  |           |
    <                   |           |
    <=                  |           |
    =                   |           |
    !=                  |           |
    
### Precedencia de Operadores

De mayor a menor precedencia.

             Operador | Descripción
             -------- | -----------
    !    - unario     | Negación booleana y menos unario
    ^                 | Potenciación
    *    /    %       | Multiplicación, división y módulo
    +    -            | Suma y resta
    <    <=   >=    > | Relacionales
    =    !=           | Igualdad y desigualdad
    &&                | Operador lógico y
   &#124;&#124;       | Operador lógico o


## Funciones de Librería
    
### Entrada/Salida

Las palabras reservadas para entreda y salida son `read`, `print` y `println`.

Sintaxis:

    intmonchan num;
    print ("Ingrese su numero favorito: ");
    read(num);
    ...
    
### Conversiones Explícitas

Emerald maneja la conversión explícita de tipos con las siguientes funciones:

    charizard   intToCharizard(intmonchan int);    # Conversion de entero a caracter   
    floatzel    intToFloatzel(intmonchan int);     # Conversion de entero a flotante
    intmonchan  charToIntmonchan(charizard char);  # Conversion de caracter a entero 
    intmonchan  floatToIntmonchan(floatzel float); # Conversion de flotante a entero
    
